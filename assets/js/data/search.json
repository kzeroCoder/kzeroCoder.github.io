[ { "title": "Java杂记——数组和双轴排序", "url": "/posts/java-notes-pt4/", "categories": "Blogging, JavaNotes", "tags": "writing", "date": "2021-05-29 10:30:00 +0800", "snippet": " 数组一维数组//数组声明dataType[] arrayRefVar; //首选方法dataType arrayRefVar[]; //效果相同，但是不推荐//创建数组arrayRefVar = new dataType[arraySize]; //初始化默认为dataType的default值dataType[] arrayRefVar = {value0, value1, ..., valuek}; //创建的同时初始化，为静态定义//数组长度int i = arrayRefVar.length //注意数组的length是一个属性，但是String的leng..." }, { "title": "Java杂记——StringBuilder，Comparator和Comparable", "url": "/posts/java-notes-pt3/", "categories": "Blogging, JavaNotes", "tags": "writing", "date": "2021-05-29 08:30:00 +0800", "snippet": " StringBuilder类public final class StringBuilder extends AbstractStringBuilder implements java.io.Serializable, CharSequenceStringBuilder实质上是一个CharSequence，即字符数组char[]根据对父类AbstractStringBuilder方法的查看abstract class AbstractStringBuilder implements Appendable, CharSequence { ... ..." }, { "title": "Java杂记——设计模式", "url": "/posts/java-notes-pt2/", "categories": "Blogging, JavaNotes", "tags": "writing", "date": "2021-05-28 11:00:00 +0800", "snippet": " 设计模式 Design Pattern 本文参考https://www.liaoxuefeng.com/wiki/1252599548343744/1264742167474528 仅作个人摘记，学习建议前往原网站创建型模式工厂方法 Factory Method定义一个用于创建对象的接口，让子类决定实例化哪一个类目的是使得创建对象和使用对象分离以廖雪峰的教程为例：public interface NumberFactory { // 创建方法: Number parse(String s); // 获取工厂实例: static Numb..." }, { "title": "Java杂记——容器", "url": "/posts/java-notes-pt1/", "categories": "Blogging, JavaNotes", "tags": "writing", "date": "2021-05-28 11:00:00 +0800", "snippet": " 容器绿色为接口，黄色为抽象类，蓝色为类，灰线和黑线没有区别，只是用来防止交错的时候产生误导，线上i表示implements，e表示extendsCollection The root interface in the collection hierarchy. A collection represents a group of objects, known as its elements. Some collections allow duplicate elements and others do not. Some are ordered and othe..." }, { "title": "计算机网络(二)", "url": "/posts/computer-network-ch2/", "categories": "Blogging, Computer Network", "tags": "writing", "date": "2020-12-02 15:29:00 +0800", "snippet": " 第二章 应用层2.1 应用层协议原理2.1.1 网络应用程序体系结构在应用程序研发者的角度看，网络体系结构式固定的，应用程序体系结构由应用程序研发者涉及。 客户-服务器体系结构(C/S) 服务器需要 7*24小时提供服务 永久性访问地址/域名 利用大量服务器实现可扩展性 客户机需要 与服务器通信，使用服务 间歇性接入网络 不与其他客户机直接通信 ..." }, { "title": "计算机网络(一)", "url": "/posts/computer-network-ch1/", "categories": "Blogging, Computer Network", "tags": "writing", "date": "2020-12-01 15:29:00 +0800", "snippet": " 第一章 计算机网络与因特网1.1 什么是因特网 构成因特网的基本硬件和软件组件 为分布式应用提供服务的联网基础设施定义：计算机网络就是互连的、自治的计算机集合。1.1.1 具体构成描述(P2)1.1.2 服务描述分布式应用程序：涉及多台相互交换数据的端系统的应用程序(如，电子邮件、Web冲浪、P2P文件共享等)应用程序编程接口/API：规定允许在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。1.1.3 什么是协议以人类活动类比：网络协议类似人类协议，除了交换报文和采取动作的实体是某些设备的硬件或软件组件。协议：定义了..." }, { "title": "机器学习笔记(七)", "url": "/posts/machine-learning-ch7/", "categories": "Blogging, Machine Learning", "tags": "writing", "date": "2020-11-20 18:00:00 +0800", "snippet": " PCA考虑一个数据集${x_1,\\dots,x_N},x_n\\in R^D$，目标是投影数据到$M(M&amp;lt;D)$维空间内。最大方差推导假设降维到一维，即$M=1$。定义$M$维空间的方向由$u_1$决定，且$u_1^Tu_1=1$目标：最大化投影方差。\\[\\frac{1}{N}\\sum_{i=1}^{N}(\\mu_1^Tx_i-\\mu_1^T\\overline{x})^T(\\mu_1^Tx_i-\\mu_1^T\\overline{x})=\\frac{1}{N}\\sum_{i=1}^{N}(\\mu_1^Tx_i-\\mu_1^T\\overline{x})(\\..." }, { "title": "机器学习笔记(六)", "url": "/posts/machine-learning-ch6/", "categories": "Blogging, Machine Learning", "tags": "writing", "date": "2020-11-15 18:00:00 +0800", "snippet": " 聚类无监督学习目标：通过对无标记训练样本的学习来揭露数据的内在性质以及规律。 数据的分类与聚类问题 密度估计问题 降维 线性：主成分分析(PCA) 非线性：流形学习(Manifold learning) 聚类定义：将一组对象分成相似对象类的过程。 类内高相似度 类间低相似度距离度量的属性： $D(A,B)=D(B,A)$ $D(A,A)=0$ $D(A,B)=0\\ iif\\ A=B$ $D(A,B)\\le D(A,C)+D(B,C)$常用的距离度量： Minkowski Metric： $d(..." }, { "title": "机器学习笔记(五)", "url": "/posts/machine-learning-ch5/", "categories": "Blogging, Machine Learning", "tags": "writing", "date": "2020-11-10 18:00:00 +0800", "snippet": " 支持向量机SVMSVM是定义在特征空间上的，间隔最大的线性分类器，是一种二分类模型。SVM支持处理线性可分数据集和非线性可分数据集： 训练数据集线性可分时，通过硬间隔最大化，学习一种线性分类器 训练数据集近似线性可分时，通过软间隔最大化，学习一种线性分类器 训练数据集不可分时，通过使用核技巧和软间隔最大化，学习一种非线性分类器硬间隔最大化Margin(记作m)为$d^-+d^+$\\[w^Tx_i+b&amp;gt;+c,\\ for\\ all\\ x_i\\in class2\\\\w^Tx_i+b&amp;lt;-c,\\ for\\ all\\ x_i\\in class..." }, { "title": "机器学习笔记(四)", "url": "/posts/machine-learning-ch4/", "categories": "Blogging, Machine Learning", "tags": "writing", "date": "2020-11-04 18:00:00 +0800", "snippet": " 贝叶斯分类器，条件独立和朴素贝叶斯条件独立定义：X与Y在给定Z的情况下条件独立，当X的概率分布在给定Z的情况下与Y值独立，数学表示为：\\[(\\forall i,j,k)P(X=x_i|Y=y_j,Z=z_k)=P(X=x_i|Z=z_k)\\]一般写作：\\[P(X|Y,Z)=P(X|Z)\\]朴素贝叶斯朴素贝叶斯假设在给定$Y$的情况下$X_i$相互条件独立，那么就有：\\[P(X_1,X_2|Y)=P(X_1|X_2,Y)P(X_2|Y)=P(X_1|Y)P(X_2|Y)\\]一般形式为：\\[P(X_1,\\dots,X_n|Y)=\\prod_{i=1}^{n}P(X_i..." }, { "title": "机器学习笔记(三)", "url": "/posts/machine-learning-ch3/", "categories": "Blogging, Machine Learning", "tags": "writing", "date": "2020-10-30 18:00:00 +0800", "snippet": " 分类理论和非参分类器贝叶斯决策论贝叶斯决策论对分类任务来说，在相关概率都已知的理想情况下，贝叶斯决策考虑如何基于这些概率和误判损失来选择最优的类别标识。当二分类的类别为正态分布时，可以得到一个decision boundary (决策面)。假设$\\Sigma_1=\\Sigma_2=\\Sigma, P(Y=1)=\\theta$：\\[P(Y=1|X)=\\frac{p(X|Y=1)P(Y=1)}{p(X)}=\\frac{\\theta N(\\mu_1,\\Sigma_1)}{p(X)}\\\\P(Y=2|X)=\\frac{p(X|Y=2)P(Y=2)}{p(X)}=\\frac{..." }, { "title": "机器学习笔记(二)", "url": "/posts/machine-learning-ch2/", "categories": "Blogging, Machine Learning", "tags": "writing", "date": "2020-10-16 18:00:00 +0800", "snippet": " 概率论噪声：因为传感器测量的变动性，形成的部分可见性和不正确标签。一些简单定理和定义随机变量的值在实验重复的情况下会发生变化。概率分布分为离散概率分布(如Bernoulli分布)和连续概率分布(如Gaussian分布，由概率密度函数下的面积确定)独立：$P(A\\cap B)=P(A)*P(B)$在连续概率分布下的p(x)的直观意义：$p(x_1)=a，p(x_2)=b$表示观测X”接近“$x_1$的可能是观测X”接近”$x_2$可能的a/b倍\\[\\lim_{h\\rightarrow 0}\\frac{P(x_1-h&amp;lt;X&amp;lt;x_1+h)}{P..." }, { "title": "机器学习笔记(一)", "url": "/posts/machine-learning-ch1/", "categories": "Blogging, Machine Learning", "tags": "writing", "date": "2020-10-10 15:29:00 +0800", "snippet": " 简介和决策树关于机器学习机器学习是寻找一种对自然/人工主题、现象或活动可预测且/或可执行的及其理解方法。研究算法需要满足PTE​ P：提高它的性能​ T：在某项任务中​ E：利用一些经验机器学习的一般泛型监督学习\\[Given \\space D=\\left\\{X_i,Y_i\\right\\},learn \\space F(\\cdot;\\theta),s.t:Y_i=F(X_i) ,\\space D^{new}=\\left\\{X_j\\right\\}\\Longrightarrow \\left\\{Y_j\\right\\}\\]非监督学习\\[Given \\sp..." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This article is to show markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1H2H3H4ParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden d..." } ]
